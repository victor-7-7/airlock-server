# With this lines, we can specify the various directives we'd like to use
# within our schema file (such as @key, as shown in the import).
extend schema
@link(url: "https://specs.apollo.dev/federation/v2.0",
  import: ["@key"])
# -----------------------------------------------------------

type Query {
  ### Bookings
  "All bookings for the given listing, optionally filtered by a BookingStatus"
  bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]!
  "A list of bookings for the guest - must be authenticated as guest"
  guestBookings: [Booking]!
  "Past bookings for guest based on current date"
  pastGuestBookings: [Booking]!
  "Upcoming and current bookings for guest based on current date"
  upcomingGuestBookings: [Booking]!
  "Current booking for guest based on current date"
  currentGuestBooking: Booking
}

type Mutation {
  ### Bookings
  createBooking(createBookingInput: CreateBookingInput): CreateBookingResponse!

  ### Reviews
  "Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse!
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(bookingId: ID!, guestReview: ReviewInput!): SubmitGuestReviewResponse!

  ### Wallet
  addFundsToWallet(amount: Float!): AddFundsToWalletResponse!
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

#### User accounts

"Represents an Airlock user's common properties"
interface User {
  id: ID!
}

"A host is a type of Airlock user. They own listings."
type Host implements User @key(fields: "id") {
  id: ID!
  "The overall calculated rating for the host"
  overallRating: Float
}

"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id") {
  id: ID!
  "Amount of money in the guest's wallet"
  funds: Float!
}

### Listings

type Listing @key(fields: "id") {
  id: ID!
  "The list of bookings for a listing"
  bookings: [Booking]!
  "The submitted reviews for this listing"
  reviews: [Review]!
  "The overall calculated rating for a listing"
  overallRating: Float
}

### Bookings

"A booking is a reservation for a specific listing"
type Booking {
  id: ID!
  "The listing associated with the reservation"
  listing: Listing!
  "The guest that reserved the location"
  guest: Guest!
  "Check-in date for the reservation"
  checkInDate: String!
  "Check-out date for the reservation"
  checkOutDate: String!
  "Total price paid, calculated using the listing's costPerNight and the check-in check-out dates"
  totalPrice: Float!
  "The status of the booking - check BookingStatus type for all possibilities"
  status: BookingStatus!
  "The guest's review of the location"
  locationReview: Review
  "The guest's review about the host"
  hostReview: Review
  "The host's review about the guest"
  guestReview: Review
}

"The status of a booking"
enum BookingStatus {
  CURRENT
  COMPLETED
  UPCOMING
}

"Fields for creating a booking"
input CreateBookingInput {
  "ID of the listing associated with the booking"
  listingId: ID!
  "Date of check-in"
  checkInDate: ID!
  "Date of check-out"
  checkOutDate: ID!
}

"Minimum details needed for a newly created booking"
type NewBookingResponse {
  id: ID!
  checkInDate: String!
  checkOutDate: String!
}

"The response after creating a booking."
type CreateBookingResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly-created booking"
  booking: NewBookingResponse
}

### Reviews

"A review consists of a numerical rating and written text. It can be written by a host or a guest."
type Review {
  id: ID!
  "Written comment the author has written about the review target"
  text: String! 
  "User that wrote the review"
  author: User! 
  "The numerical rating for the review target, on a scale of 1-5, with 5 being excellent."
  rating: Float! 
}

"ReviewInput is the bare minimum needed to submit a review, not tied to any target."
input ReviewInput {
  text: String!
  rating: Float!
}

"The response after submitting reviews for both host and location together."
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the host"
  hostReview: Review
  "Newly created review about the location"
  locationReview: Review
}

"The response after submitting reviews for a guest."
type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the guest"
  guestReview: Review
}

### Payments

type AddFundsToWalletResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Updated wallet amount"
  amount: Float
}



