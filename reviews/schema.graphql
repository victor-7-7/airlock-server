# With this lines, we can specify the various directives we'd like to use
# within our schema file (such as @key, as shown in the import).
extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0",
    import: ["@key"])
# -----------------------------------------------------------

type Mutation {
  "Creates a review for the guest - must be authored by host of past booking"
  submitGuestReview(bookingId: ID!, guestReview: ReviewInput!): SubmitGuestReviewResponse!

  "Creates reviews for both host and listing for a particular booking - must be authored by guest of past booking"
  submitHostAndLocationReviews(
    bookingId: ID!
    hostReview: ReviewInput!
    locationReview: ReviewInput!
  ): SubmitHostAndLocationReviewsResponse!
}

"Represents an Airlock user's common properties"
interface User {
  id: ID!
}

"A host is a type of Airlock user. They own listings."
type Host implements User @key(fields: "id") {
  id: ID!
  "The overall calculated rating for the host"
  overallRating: Float
}

# Тип Guest нужен, чтобы пофиксить баг - Abstract type "User" was
# resolved to a type "Guest" that does not exist inside the schema.
# Это происходит когда резолвится ревьюшное поле author: User!
"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id", resolvable: false) {
  id: ID!
}

type Listing @key(fields: "id") {
  id: ID!
  "The submitted reviews for this listing"
  reviews: [Review]!
  "The overall calculated rating for a listing"
  overallRating: Float
}


"A booking is a reservation for a specific listing"
type Booking @key(fields: "id") {
  id: ID!
  "The host's review about the guest"
  guestReview: Review
  "The guest's review about the host"
  hostReview: Review
  "The guest's review of the location"
  locationReview: Review
}


"A review consists of a numerical rating and written text. It can be written by a host or a guest."
type Review {
  id: ID!
  "Written comment the author has written about the review target"
  text: String! 
  "User that wrote the review"
  author: User! 
  "The numerical rating for the review target, on a scale of 1-5, with 5 being excellent."
  rating: Float! 
}

"ReviewInput is the bare minimum needed to submit a review, not tied to any target."
input ReviewInput {
  text: String!
  rating: Float!
}

"The response after submitting reviews for both host and location together."
type SubmitHostAndLocationReviewsResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the host"
  hostReview: Review
  "Newly created review about the location"
  locationReview: Review
}

"The response after submitting reviews for a guest."
type SubmitGuestReviewResponse implements MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "Newly created review about the guest"
  guestReview: Review
}

interface MutationResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
}

