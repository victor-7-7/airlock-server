extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])
        
type Query {
    "All bookings for the given listing, optionally filtered by a BookingStatus"
    bookingsForListing(listingId: ID!, status: BookingStatus): [Booking]!
    "A list of bookings for the guest - must be authenticated as guest"
    guestBookings: [Booking]!
    "Past bookings for guest based on current date"
    pastGuestBookings: [Booking]!
    "Upcoming and current bookings for guest based on current date"
    upcomingGuestBookings: [Booking]!
    "Current booking for guest based on current date"
    currentGuestBooking: Booking
}

type Mutation {
    createBooking(createBookingInput: CreateBookingInput): CreateBookingResponse!
    "Add money into the guest's wallet"
    addFundsToWallet(amount: Float!): AddFundsToWalletResponse!
}

"Represents an Airlock user's common properties"
interface User {
    id: ID!
}

"A guest is a type of Airlock user. They book places to stay."
type Guest implements User @key(fields: "id") {
    id: ID!
    "Amount of money in the guest's wallet"
    funds: Float!
}

type Listing @key(fields: "id") {
    id: ID!
    "The list of bookings for a listing"
    bookings: [Booking]!
}

"A booking is a reservation for a specific listing"
type Booking @key(fields: "id") {
    id: ID!
    "The listing associated with the reservation"
    listing: Listing!
    "The guest that reserved the location"
    guest: Guest!
    "Check-in date for the reservation"
    checkInDate: String!
    "Check-out date for the reservation"
    checkOutDate: String!
    "Total price paid, calculated using the listing's costPerNight and the check-in check-out dates"
    totalPrice: Float!
    "The status of the booking - check BookingStatus type for all possibilities"
    status: BookingStatus!
}

"The status of a booking"
enum BookingStatus {
    CURRENT
    COMPLETED
    UPCOMING
}

"Fields for creating a booking"
input CreateBookingInput {
    "ID of the listing associated with the booking"
    listingId: ID!
    "Date of check-in"
    checkInDate: ID!
    "Date of check-out"
    checkOutDate: ID!
}

"Minimum details needed for a newly created booking"
type NewBookingResponse {
    id: ID!
    checkInDate: String!
    checkOutDate: String!
}

"The response after creating a booking."
type CreateBookingResponse implements MutationResponse {
    "Similar to HTTP status code, represents the status of the mutation"
    code: Int!
    "Indicates whether the mutation was successful"
    success: Boolean!
    "Human-readable message for the UI"
    message: String!
    "The newly-created booking"
    booking: NewBookingResponse
}

type AddFundsToWalletResponse implements MutationResponse {
    "Similar to HTTP status code, represents the status of the mutation"
    code: Int!
    "Indicates whether the mutation was successful"
    success: Boolean!
    "Human-readable message for the UI"
    message: String!
    "Updated wallet amount"
    amount: Float
}

interface MutationResponse {
    "Similar to HTTP status code, represents the status of the mutation"
    code: Int!
    "Indicates whether the mutation was successful"
    success: Boolean!
    "Human-readable message for the UI"
    message: String!
}

